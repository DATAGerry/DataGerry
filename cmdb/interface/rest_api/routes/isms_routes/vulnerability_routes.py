# DATAGERRY - OpenSource Enterprise CMDB
# Copyright (C) 2025 becon GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
"""
Implementation of all API routes for the IsmsVulnerabilities
"""
import logging
from flask import request, abort
from werkzeug.exceptions import HTTPException

from cmdb.manager import VulnerabilityManager
from cmdb.manager.query_builder import BuilderParameters
from cmdb.manager.manager_provider_model import ManagerProvider, ManagerType

from cmdb.models.user_model import CmdbUser
from cmdb.models.isms_model import IsmsVulnerability

from cmdb.framework.results import IterationResult
from cmdb.interface.blueprints import APIBlueprint
from cmdb.interface.route_utils import insert_request_user, verify_api_access
from cmdb.interface.rest_api.api_level_enum import ApiLevel
from cmdb.interface.rest_api.responses.response_parameters import CollectionParameters
from cmdb.interface.rest_api.responses import (
    InsertSingleResponse,
    GetMultiResponse,
    GetSingleResponse,
    UpdateSingleResponse,
    DeleteSingleResponse,
)

from cmdb.errors.manager.vulnerability_manager import (
    VulnerabilityManagerInsertError,
    VulnerabilityManagerGetError,
    VulnerabilityManagerUpdateError,
    VulnerabilityManagerDeleteError,
    VulnerabilityManagerIterationError,
)
# -------------------------------------------------------------------------------------------------------------------- #

LOGGER = logging.getLogger(__name__)

vulnerability_blueprint = APIBlueprint('vulnerability', __name__)

# ---------------------------------------------------- CRUD-CREATE --------------------------------------------------- #

@vulnerability_blueprint.route('/', methods=['POST'])
@insert_request_user
@verify_api_access(required_api_level=ApiLevel.LOCKED)
@vulnerability_blueprint.protect(auth=True, right='base.isms.vulnerability.add')
@vulnerability_blueprint.validate(IsmsVulnerability.SCHEMA)
def insert_isms_vulnerability(data: dict, request_user: CmdbUser):
    """
    HTTP `POST` route to insert an IsmsVulnerability into the database

    Args:
        data (IsmsVulnerability.SCHEMA): Data of the IsmsVulnerability which should be inserted
        request_user (CmdbUser): User requesting this data

    Returns:
        InsertSingleResponse: The new IsmsVulnerability and its public_id
    """
    try:
        vulnerability_manager: VulnerabilityManager = ManagerProvider.get_manager(ManagerType.VULNERABILITY,
                                                                                  request_user)

        result_id: int = vulnerability_manager.insert_item(data)

        created_vulnerability: dict = vulnerability_manager.get_item(result_id)

        if created_vulnerability:
            return InsertSingleResponse(created_vulnerability, result_id).make_response()

        abort(404, "Could not retrieve the created Vulnerability from the database!")
    except HTTPException as http_err:
        raise http_err
    except VulnerabilityManagerInsertError as err:
        LOGGER.error("[insert_isms_vulnerability] VulnerabilityManagerInsertError: %s", err, exc_info=True)
        abort(400, "Could not insert the new Vulnerability in the database!")
    except VulnerabilityManagerGetError as err:
        LOGGER.error("[insert_isms_vulnerability] VulnerabilityManagerGetError: %s", err, exc_info=True)
        abort(400, "Failed to retrieve the created Vulnerability from the database!")
    except Exception as err:
        LOGGER.error("[insert_isms_vulnerability] Exception: %s. Type: %s", err, type(err), exc_info=True)
        abort(500, "An internal server error occured while creating the Vulnerability!")

# ---------------------------------------------------- CRUD - READ --------------------------------------------------- #

@vulnerability_blueprint.route('/', methods=['GET', 'HEAD'])
@insert_request_user
@verify_api_access(required_api_level=ApiLevel.LOCKED)
@vulnerability_blueprint.protect(auth=True, right='base.isms.vulnerability.view')
@vulnerability_blueprint.parse_collection_parameters()
def get_isms_vulnerabilities(params: CollectionParameters, request_user: CmdbUser):
    """
    HTTP `GET`/`HEAD` route for getting multiple IsmsVulnerabilities

    Args:
        params (CollectionParameters): Filter for requested IsmsVulnerabilities
        request_user (CmdbUser): User requesting this data

    Returns:
        GetMultiResponse: All the IsmsVulnerabilities matching the CollectionParameters
    """
    try:
        body = request.method == 'HEAD'

        vulnerability_manager: VulnerabilityManager = ManagerProvider.get_manager(ManagerType.VULNERABILITY,
                                                                                  request_user)

        builder_params = BuilderParameters(**CollectionParameters.get_builder_params(params))

        iteration_result: IterationResult[IsmsVulnerability] = vulnerability_manager.iterate_items(builder_params)
        vulnerabilities_list = [IsmsVulnerability.to_json(vulnerability) for vulnerability in iteration_result.results]

        api_response = GetMultiResponse(vulnerabilities_list,
                                        iteration_result.total,
                                        params,
                                        request.url,
                                        body)

        return api_response.make_response()
    except VulnerabilityManagerIterationError as err:
        LOGGER.error("[get_isms_vulnerabilities] VulnerabilityManagerIterationError: %s", err, exc_info=True)
        abort(400, "Failed to retrieve Vulnerabilities from the database!")
    except Exception as err:
        LOGGER.error("[get_isms_vulnerabilities] Exception: %s. Type: %s", err, type(err), exc_info=True)
        abort(500, "Internal server error while retrieving Vulnerabilities!")


@vulnerability_blueprint.route('/<int:public_id>', methods=['GET', 'HEAD'])
@insert_request_user
@verify_api_access(required_api_level=ApiLevel.LOCKED)
@vulnerability_blueprint.protect(auth=True, right='base.isms.vulnerability.view')
def get_isms_vulnerability(public_id: int, request_user: CmdbUser):
    """
    HTTP `GET`/`HEAD` route to retrieve a single IsmsVulnerability

    Args:
        public_id (int): public_id of the IsmsVulnerability
        request_user (CmdbUser): User requesting this data

    Returns:
        GetSingleResponse: The requested IsmsVulnerability
    """
    try:
        vulnerability_manager: VulnerabilityManager = ManagerProvider.get_manager(ManagerType.VULNERABILITY,
                                                                                  request_user)

        requested_vulnerability = vulnerability_manager.get_item(public_id)

        if requested_vulnerability:
            return GetSingleResponse(requested_vulnerability, body = request.method == 'HEAD').make_response()

        abort(404, f"The Vulnerability with ID:{public_id} was not found!")
    except HTTPException as http_err:
        raise http_err
    except VulnerabilityManagerGetError as err:
        LOGGER.error("[get_isms_vulnerability] VulnerabilityManagerGetError: %s", err, exc_info=True)
        abort(400, f"Failed to retrieve the Vulnerability with ID: {public_id} from the database!")
    except Exception as err:
        LOGGER.error("[get_isms_vulnerability] Exception: %s. Type: %s", err, type(err), exc_info=True)
        abort(500, f"Internal server error while retrieving the Vulnerability with ID: {public_id}!")

# --------------------------------------------------- CRUD - UPDATE -------------------------------------------------- #

@vulnerability_blueprint.route('/<int:public_id>', methods=['PUT', 'PATCH'])
@insert_request_user
@verify_api_access(required_api_level=ApiLevel.LOCKED)
@vulnerability_blueprint.protect(auth=True, right='base.isms.vulnerability.edit')
@vulnerability_blueprint.validate(IsmsVulnerability.SCHEMA)
def update_isms_vulnerability(public_id: int, data: dict, request_user: CmdbUser):
    """
    HTTP `PUT`/`PATCH` route to update a single IsmsVulnerability

    Args:
        public_id (int): public_id of the IsmsVulnerability which should be updated
        data (IsmsVulnerability.SCHEMA): New IsmsVulnerability data
        request_user (CmdbUser): User requesting this data

    Returns:
        UpdateSingleResponse: The new data of the IsmsVulnerability
    """
    try:
        vulnerability_manager: VulnerabilityManager = ManagerProvider.get_manager(ManagerType.VULNERABILITY,
                                                                                  request_user)

        to_update_vulnerability = vulnerability_manager.get_item(public_id)

        if not to_update_vulnerability:
            abort(404, f"The Vulnerability with ID:{public_id} was not found!")

        vulnerability = IsmsVulnerability.from_data(data)

        vulnerability_manager.update_item(public_id, vulnerability)

        return UpdateSingleResponse(data).make_response()
    except HTTPException as http_err:
        raise http_err
    except VulnerabilityManagerGetError as err:
        LOGGER.error("[update_isms_vulnerability] VulnerabilityManagerGetError: %s", err, exc_info=True)
        abort(400, f"Failed to retrieve the Vulnerability with ID: {public_id} from the database!")
    except VulnerabilityManagerUpdateError as err:
        LOGGER.error("[update_isms_vulnerability] VulnerabilityManagerUpdateError: %s", err, exc_info=True)
        abort(400, f"Failed to update the Vulnerability with ID: {public_id}!")
    except Exception as err:
        LOGGER.error("[update_isms_vulnerability] Exception: %s. Type: %s", err, type(err), exc_info=True)
        abort(500, f"Internal server error while updating the Vulnerability with ID: {public_id}!")

# --------------------------------------------------- CRUD - DELETE -------------------------------------------------- #

@vulnerability_blueprint.route('/<int:public_id>', methods=['DELETE'])
@insert_request_user
@verify_api_access(required_api_level=ApiLevel.LOCKED)
@vulnerability_blueprint.protect(auth=True, right='base.isms.vulnerability.delete')
def delete_isms_vulnerability(public_id: int, request_user: CmdbUser):
    """
    HTTP `DELETE` route to delete a single IsmsVulnerability

    Args:
        public_id (int): public_id of the IsmsVulnerability which should be deleted
        request_user (CmdbUser): User requesting this data

    Returns:
        DeleteSingleResponse: The deleted IsmsVulnerability data
    """
    try:
        vulnerability_manager: VulnerabilityManager = ManagerProvider.get_manager(ManagerType.VULNERABILITY,
                                                                                  request_user)

        to_delete_vulnerability = vulnerability_manager.get_item(public_id)

        if not to_delete_vulnerability:
            abort(404, f"The Vulnerability with ID:{public_id} was not found!")

        vulnerability_manager.delete_item(public_id)

        return DeleteSingleResponse(to_delete_vulnerability).make_response()
    except HTTPException as http_err:
        raise http_err
    except VulnerabilityManagerDeleteError as err:
        LOGGER.error("[delete_isms_vulnerability] VulnerabilityManagerDeleteError: %s", err, exc_info=True)
        abort(400, f"Failed to delete the Vulnerability with ID:{public_id}!")
    except VulnerabilityManagerGetError as err:
        LOGGER.error("[delete_isms_vulnerability] VulnerabilityManagerGetError: %s", err, exc_info=True)
        abort(400, f"Failed to retrieve the Vulnerability with ID:{public_id} from the database!")
    except Exception as err:
        LOGGER.error("[delete_isms_vulnerability] Exception: %s. Type: %s", err, type(err), exc_info=True)
        abort(500, f"Internal server error while deleting the Vulnerability with ID: {public_id}!")
